/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright by The HDF Group.                                               *
 * All rights reserved.                                                      *
 *                                                                           *
 * This file is part of HDF5.  The full HDF5 copyright notice, including     *
 * terms governing use, modification, and redistribution, is contained in    *
 * the COPYING file, which can be found at the root of the source code       *
 * distribution tree, or in https://www.hdfgroup.org/licenses.               *
 * If you do not have access to either file, you may request a copy from     *
 * help@hdfgroup.org.                                                        *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef H5_API_TEST_H
#define H5_API_TEST_H

#include <hdf5.h>
#include <H5private.h>

#include "h5test.h"

#include "H5_api_test_config.h"
#include "H5_api_test_util.h"

/* Define H5VL_VERSION if not already defined */
#ifndef H5VL_VERSION
#define H5VL_VERSION 0
#endif

/* Define macro to wait forever depending on version */
#if H5VL_VERSION >= 2
#define H5_API_TEST_WAIT_FOREVER H5ES_WAIT_FOREVER
#else
#define H5_API_TEST_WAIT_FOREVER UINT64_MAX
#endif

/******************************************************************************/

/* The name of the file that all of the tests will operate on */
#define TEST_FILE_NAME "H5_api_test.h5"

/* Final name of the API test container file (for this thread) */
#ifdef H5_HAVE_MULTITHREAD
#define H5_API_TEST_FILENAME                                                                                 \
    (pthread_getspecific(thread_info_key_g)                                                                  \
         ? ((thread_info_t *)pthread_getspecific(thread_info_key_g))->H5_api_test_filename                   \
         : NULL)
#else
extern char H5_api_test_filename[];
#define H5_API_TEST_FILENAME H5_api_test_filename
#endif

extern const char *test_path_prefix;
extern size_t      active_thread_ct;

/*
 * Environment variable specifying a prefix string to add to
 * filenames generated by the API tests
 */
#define HDF5_API_TEST_PATH_PREFIX "HDF5_API_TEST_PATH_PREFIX"

/* The names of a set of container groups which hold objects
 * created by each of the different types of tests.
 */
#define GROUP_TEST_GROUP_NAME         "group_tests"
#define ATTRIBUTE_TEST_GROUP_NAME     "attribute_tests"
#define DATASET_TEST_GROUP_NAME       "dataset_tests"
#define DATATYPE_TEST_GROUP_NAME      "datatype_tests"
#define LINK_TEST_GROUP_NAME          "link_tests"
#define OBJECT_TEST_GROUP_NAME        "object_tests"
#define MISCELLANEOUS_TEST_GROUP_NAME "miscellaneous_tests"

#define ARRAY_LENGTH(array) sizeof(array) / sizeof(array[0])

#define UNUSED(o) (void)(o);

/* The maximum size of a dimension in an HDF5 dataspace as allowed
 * for this testing suite so as not to try to create too large
 * of a dataspace/datatype. */
#define MAX_DIM_SIZE 16

#ifdef H5_HAVE_MULTITHREAD
/* Individual API tests may be run serially or in multiple threads.
 * If being run in multiple threads, this macro will define a handler
 * named <test>_thread which creates and tears down the threads.
 *
 * TBD: Note that it invokes another macro-defined routine...which sets up threadlocal info...
 * */
#define DECLARE_MT_API_TEST_FUNC_OUTER(func)                                                                 \
    void func##_thread_outer(void);                                                                          \
    void func##_thread_outer(void)                                                                           \
    {                                                                                                        \
        pthread_t *threads     = NULL;                                                                       \
        int        max_threads = GetTestMaxNumThreads();                                                     \
        if ((threads = calloc((size_t)max_threads, sizeof(pthread_t))) == NULL) {                            \
            TestErrPrintf("Couldn't allocate threads");                                                      \
            return;                                                                                          \
        }                                                                                                    \
        for (int64_t i = 0; i < (int64_t)max_threads; i++) {                                                 \
            if (pthread_create(&threads[i], NULL, func##_thread_inner, (void *)i) != 0) {                    \
                TestErrPrintf("Couldn't create API test thread %ld", i);                                     \
                return;                                                                                      \
            }                                                                                                \
        }                                                                                                    \
        for (int i = 0; i < max_threads; i++) {                                                              \
            if (pthread_join(threads[i], NULL) != 0) {                                                       \
                TestErrPrintf("Couldn't join API test thread %d", i);                                        \
                return;                                                                                      \
            }                                                                                                \
        }                                                                                                    \
        free(threads);                                                                                       \
        return;                                                                                              \
    }

#define MT_API_TEST_FUNC_OUTER(func) func##_thread_outer

/* Invoked by MT_API_TEST_FUNC_OUTER. Sets up thread-local API test info and runs the actual test in this
 * thread. */
#define DECLARE_MT_API_TEST_FUNC_INNER(func)                                                                 \
    void *func##_thread_inner(void *arg);                                                                    \
    void *func##_thread_inner(void *arg)                                                                     \
    {                                                                                                        \
        int64_t thread_idx = (int64_t)arg;                                                                   \
        if (H5_api_test_thread_setup((int)thread_idx) < 0) {                                                 \
            TestErrPrintf("Error setting up thread-local API test info");                                    \
            return (void *)-1;                                                                               \
        }                                                                                                    \
        func();                                                                                              \
        return NULL;                                                                                         \
    }

#define MT_API_TEST_FUNC_INNER(func) func##_thread_inner

/* Declare the multi-thread helper routines to execute an API test in multiple threads.*/
#define MULTI_DECLARE(func)                                                                                  \
    DECLARE_MT_API_TEST_FUNC_INNER(func)                                                                     \
    DECLARE_MT_API_TEST_FUNC_OUTER(func)
#else /* H5_HAVE_MULTITHREAD */
#define MT_API_TEST_FUNC_OUTER(func) func
#define MULTI_DECLARE(func)
#endif /* H5_HAVE_MULTITHREAD */
#endif